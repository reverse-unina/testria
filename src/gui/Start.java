/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Start.java
 *
 * Created on 9-ott-2009, 10.02.48
 */

package gui;

import testsuitereducer.MatrixTestCase;
import testsuitereducer.ImportGoldenS;
import testsuitemanager.Commands;
import testsuitemanager.TestCase;
import dbmanager.DBmanagement;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSet;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import service.*;
import testsuitemanager.TestSuite;

/**
 *
 * @author angelo
 */
public class Start extends javax.swing.JFrame {
    public static Connection conn = null;
    public static String user = null;
    public static char[] passwo = null;
    public static String porto = null;
    public static String nomeDB = null;
    public static String posiz = null;
    private Object[] tcases = null;
    private Object[] tcases_r = null;
    private int riga_selez = 0;
    private ImportGoldenS imp = null;
    private int[][] matrix_full = null;
    private int[][] matrix_reduc = null;
    private String[][] tracesLoaded = null;
    public static JProgressBar jPB_progressione = new JProgressBar();
    /** Creates new form Start */
    public Start() {
        initComponents();
        jPB_progressione.setStringPainted(true);
        jPanelBar.add(jPB_progressione);
        String osType = System.getProperty("os.name");
        try {
            if(osType.startsWith("Mac")){
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            }
            else{
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
            SwingUtilities.updateComponentTreeUI(this);
            this.pack();
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Errore nel settare il Look&Feel");
        }
        Object[] obj = {jB_DeleteTS, jCB_half, jCBox_cluster_face1, jDynaRia, jCB_mod, jB_Java, jCB_Kind, jB_View, jB_Filter, jB_ReduceTCs, jCBox_cluster, jB_XML, jB_Selenium, jCBox_cluster_face, jB_SelezGS, jB_Load, jRB_Import};
        this.setEnableObject(obj , false);
        jT_elenco.setRowSelectionAllowed(false);
        jT_Event.setRowSelectionAllowed(false);
        jCB_half.setSelected(true);
        jT_monitor.setEditable(false);
        this.loadNameDBs();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start = new javax.swing.JFrame();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jL_trace = new javax.swing.JLabel();
        jP_pannello = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jT_elenco = new javax.swing.JTable();
        jS_separatore = new javax.swing.JSeparator();
        jB_ReduceTCs = new javax.swing.JButton();
        jL_db = new javax.swing.JLabel();
        jB_connect = new javax.swing.JButton();
        jL_indirizzo_db = new javax.swing.JLabel();
        jTx_indirizzo_db = new javax.swing.JTextField();
        jL_user = new javax.swing.JLabel();
        jL_pass = new javax.swing.JLabel();
        jTx_user = new javax.swing.JTextField();
        jB_quit = new javax.swing.JButton();
        jPass_password = new javax.swing.JPasswordField();
        jTx_port = new javax.swing.JTextField();
        jL_port = new javax.swing.JLabel();
        jB_cancel = new javax.swing.JButton();
        jT_monitor = new javax.swing.JTextField();
        jTx_titolo = new javax.swing.JTextField();
        jS_separatore1 = new javax.swing.JSeparator();
        jL_cluster = new javax.swing.JLabel();
        jCBox_cluster = new javax.swing.JComboBox();
        jB_XML = new javax.swing.JButton();
        jB_Selenium = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jL_cluster_face = new javax.swing.JLabel();
        jCBox_cluster_face = new javax.swing.JComboBox();
        jB_SelezGS = new javax.swing.JButton();
        jL_SelezGS = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jT_Event = new javax.swing.JTable();
        jCB_Kind = new javax.swing.JComboBox();
        jB_View = new javax.swing.JButton();
        jB_Filter = new javax.swing.JButton();
        jB_Load = new javax.swing.JButton();
        jPanelBar = new javax.swing.JPanel();
        jRB_Import = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jCB_half = new javax.swing.JCheckBox();
        jB_Java = new javax.swing.JButton();
        jCB_mod = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jT_Filter = new javax.swing.JTable();
        jDynaRia = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jCB_AppName = new javax.swing.JComboBox();
        jCB_TSRidotte = new javax.swing.JComboBox();
        jTF_TSR = new javax.swing.JTextField();
        jCBox_cluster_face1 = new javax.swing.JComboBox();
        jL_Tecniche = new javax.swing.JLabel();
        jB_DeleteTS = new javax.swing.JButton();
        jTx_nome_db = new javax.swing.JComboBox();

        javax.swing.GroupLayout startLayout = new javax.swing.GroupLayout(start.getContentPane());
        start.getContentPane().setLayout(startLayout);
        startLayout.setHorizontalGroup(
            startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        startLayout.setVerticalGroup(
            startLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TestRia");

        jL_trace.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        jL_trace.setForeground(new java.awt.Color(102, 0, 0));
        jL_trace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_trace.setText("Select your traces");
        jL_trace.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.yellow, null));

        jP_pannello.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Traces avaible", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 204))); // NOI18N

        jT_elenco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Id Trace", "Name trace", "Username", "Date", "Size", "-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_elenco.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jT_elenco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_elencoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jT_elenco);

        javax.swing.GroupLayout jP_pannelloLayout = new javax.swing.GroupLayout(jP_pannello);
        jP_pannello.setLayout(jP_pannelloLayout);
        jP_pannelloLayout.setHorizontalGroup(
            jP_pannelloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );
        jP_pannelloLayout.setVerticalGroup(
            jP_pannelloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );

        jS_separatore.setForeground(new java.awt.Color(0, 0, 0));

        jB_ReduceTCs.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_ReduceTCs.setText("Reduce TS");
        jB_ReduceTCs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ReduceTCsActionPerformed(evt);
            }
        });

        jL_db.setText("Name");

        jB_connect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/image/hd.png"))); // NOI18N
        jB_connect.setToolTipText("Connect to DB");
        jB_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_connectActionPerformed(evt);
            }
        });

        jL_indirizzo_db.setText("Address");

        jTx_indirizzo_db.setText("localhost");

        jL_user.setText("User");

        jL_pass.setText("Password");

        jTx_user.setText("root");

        jB_quit.setFont(new java.awt.Font("Tahoma", 1, 11));
        jB_quit.setForeground(new java.awt.Color(255, 0, 51));
        jB_quit.setText("Exit");
        jB_quit.setToolTipText("Exit");
        jB_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_quitActionPerformed(evt);
            }
        });

        jPass_password.setText("root");

        jTx_port.setText("3306");

        jL_port.setText("Port");

        jB_cancel.setText("Cancel");
        jB_cancel.setToolTipText("");
        jB_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_cancelActionPerformed(evt);
            }
        });

        jTx_titolo.setBackground(new java.awt.Color(204, 255, 204));
        jTx_titolo.setEditable(false);
        jTx_titolo.setFont(new java.awt.Font("Lucida Grande", 3, 14));
        jTx_titolo.setForeground(new java.awt.Color(0, 0, 204));
        jTx_titolo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTx_titolo.setText("Insert db parameters");
        jTx_titolo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jS_separatore1.setForeground(new java.awt.Color(0, 0, 0));

        jL_cluster.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jL_cluster.setText("Transaction Clustering");

        jCBox_cluster.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "T0", "T1_C1", "T1_C2", "T1_C3", "T1_C4", "T2_C1", "T2_C2", "T2_C3", "T2_C4" }));

        jB_XML.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_XML.setText("TestSuite for Selenium IDE");
        jB_XML.setToolTipText("TestSuite for Selenium IDE");
        jB_XML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_XMLActionPerformed(evt);
            }
        });

        jB_Selenium.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_Selenium.setText("Start TestSuite by SeleniumRC");
        jB_Selenium.setToolTipText("Starts with Selenium");
        jB_Selenium.setBorder(null);
        jB_Selenium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SeleniumActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select processing parameters ");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.yellow, null));

        jL_cluster_face.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jL_cluster_face.setText("Interface Clustering");

        jCBox_cluster_face.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C1", "C2", "C3", "C4" }));

        jB_SelezGS.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_SelezGS.setText("Import Gold Standard from file.dot");
        jB_SelezGS.setToolTipText("Import Gold Standard");
        jB_SelezGS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SelezGSActionPerformed(evt);
            }
        });

        jL_SelezGS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_SelezGS.setText("Name file.dot selected ");
        jL_SelezGS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jL_SelezGS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jT_Event.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Trace", "Event"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_Event.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jT_Event.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jT_Event.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jT_Event);

        jCB_Kind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "States", "Transactions", "Javascript" }));

        jB_View.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_View.setText("Report Reduction");
        jB_View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ViewActionPerformed(evt);
            }
        });

        jB_Filter.setText("Filter");
        jB_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FilterActionPerformed(evt);
            }
        });

        jB_Load.setText("Load");
        jB_Load.setToolTipText("");
        jB_Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_LoadActionPerformed(evt);
            }
        });

        jPanelBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBar.setLayout(new java.awt.BorderLayout());

        jRB_Import.setSelected(true);
        jRB_Import.setText("Import Gold Standard from DataBase");
        jRB_Import.setBorder(null);
        jRB_Import.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jCB_half.setText("Reduced TestSuite");

        jB_Java.setFont(new java.awt.Font("Tahoma", 0, 10));
        jB_Java.setText("Export Java Class Test");
        jB_Java.setToolTipText("Create Java Class");
        jB_Java.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_JavaActionPerformed(evt);
            }
        });

        jCB_mod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "label", "id" }));

        jT_Filter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Ignored event types"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_Filter.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jT_Filter.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jT_Filter.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jT_Filter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_FilterMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jT_Filter);

        jDynaRia.setFont(new java.awt.Font("Tahoma", 0, 10));
        jDynaRia.setText("DynaRIA format Test Case");
        jDynaRia.setToolTipText("DynaRIA format Test Case");
        jDynaRia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jDynaRia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDynaRiaActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 3, 12));
        jButton1.setForeground(new java.awt.Color(0, 51, 255));
        jButton1.setText("Credits");
        jButton1.setToolTipText("");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCB_AppName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_AppNameActionPerformed(evt);
            }
        });

        jCB_TSRidotte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_TSRidotteActionPerformed(evt);
            }
        });

        jTF_TSR.setFont(new java.awt.Font("Tahoma", 2, 11));
        jTF_TSR.setText("Insert name for Test Suite reduced");
        jTF_TSR.setToolTipText("");
        jTF_TSR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTF_TSRMouseClicked(evt);
            }
        });

        jCBox_cluster_face1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C1", "C2", "C3", "C4" }));

        jL_Tecniche.setText("Select type of Reduction");
        jL_Tecniche.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jB_DeleteTS.setText("Delete TSR");
        jB_DeleteTS.setToolTipText("Delete current TS Reduced");
        jB_DeleteTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_DeleteTSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTx_titolo, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jP_pannello, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jS_separatore, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jL_indirizzo_db, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_port)
                            .addComponent(jL_db, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTx_nome_db, javax.swing.GroupLayout.Alignment.LEADING, 0, 129, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTx_port, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jT_monitor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTx_indirizzo_db, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jL_pass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jL_user, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTx_user, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jB_cancel, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(jPass_password, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jB_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jB_Load, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelBar, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jL_cluster)
                                .addGap(8, 8, 8)
                                .addComponent(jCBox_cluster, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jL_cluster_face)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBox_cluster_face, 0, 136, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jL_trace, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCB_AppName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCB_TSRidotte, 0, 113, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_DeleteTS)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jB_Selenium, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jB_XML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDynaRia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jB_Java, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jCBox_cluster_face1, 0, 126, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCB_half)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jB_quit))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTF_TSR, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(jL_Tecniche, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jB_View)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_ReduceTCs, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCB_Kind, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCB_mod, 0, 102, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jS_separatore1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRB_Import, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jB_Filter, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(jL_SelezGS, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(jB_SelezGS, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTx_titolo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_db)
                    .addComponent(jL_user)
                    .addComponent(jTx_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTx_nome_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_indirizzo_db)
                            .addComponent(jTx_indirizzo_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_pass)
                            .addComponent(jPass_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_port)
                            .addComponent(jTx_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jT_monitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jB_cancel)))
                    .addComponent(jB_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jS_separatore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_trace)
                    .addComponent(jCB_AppName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_TSRidotte, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jB_DeleteTS, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_pannello, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_cluster, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBox_cluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_cluster_face)
                    .addComponent(jCBox_cluster_face, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jB_Load, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jS_separatore1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_Filter)
                    .addComponent(jRB_Import, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jB_SelezGS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jL_SelezGS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jL_Tecniche)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCB_Kind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCB_mod, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTF_TSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jB_View, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jB_ReduceTCs, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_XML, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDynaRia, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jB_Java, 0, 22, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_quit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jB_Selenium, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCB_half, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBox_cluster_face1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_ReduceTCsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ReduceTCsActionPerformed
        // TODO add your handling code here:
        MatrixTestCase matr = null;

        if(!jRB_Import.isSelected()){
            //Import da File
            matr = new MatrixTestCase(imp.getStates(), imp.getTransitions(), tcases, jCB_Kind.getSelectedIndex(), "label");
        }
        else{
            //Import dal DB
            if(((String)jCB_Kind.getSelectedItem()).equals("Javascript")){
                imp = new ImportGoldenS(tcases, "js");
                matr = new MatrixTestCase(imp.getJavascript(), imp.getJavascript(), tcases, 2, "js");
            }
            else{
                imp = new ImportGoldenS(tcases, this.jCB_mod.getSelectedItem().toString());
                matr = new MatrixTestCase(imp.getStates(), imp.getTransitions(), tcases, jCB_Kind.getSelectedIndex(), this.jCB_mod.getSelectedItem().toString());
            }
        }
        matr.fillMatrix();
        matrix_full = matr.getMatrixNR();
        matr.ruduceMatrix();
        matrix_reduc = matr.getMatrixR();
        tcases_r = matr.getTCaseR();
        if(jTF_TSR.getText().equals("Insert name for Test Suite reduced")){}
        else{
            this.writeTSR(tcases_r);
            this.fillNameTSReduced();
        }
        jB_View.setEnabled(true);
        jB_XML.setEnabled(true);
        jB_Selenium.setEnabled(true);
        jCBox_cluster_face1.setEnabled(true);
        jCB_half.setEnabled(true);
    }//GEN-LAST:event_jB_ReduceTCsActionPerformed

    private void jB_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_connectActionPerformed
        // TODO add your handling code here:
        tracesLoaded = this.getTraces("");
        this.fillTabTrace(tracesLoaded);
        this.fillAppName(this.getAppName(tracesLoaded));
        this.fillNameTSReduced();
    }//GEN-LAST:event_jB_connectActionPerformed

    private void jB_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_quitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jB_quitActionPerformed

    private void jB_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_cancelActionPerformed
        // TODO add your handling code here:
        Object[] obj_1 = {jTx_user, jPass_password, jTx_nome_db, jTx_port, jTx_indirizzo_db, jB_connect,jT_elenco};
        this.setEnableObject(obj_1 , true);
        jTx_user.setText("root");
//        jTx_nome_db.setText("creriautente");
        this.loadNameDBs();
        jPass_password.setText("");
        jTx_port.setText("3306");
        jTx_indirizzo_db.setText("localhost");
        jL_SelezGS.setText("Nome Golden Standard");
        jT_monitor.setBackground(Color.WHITE);
        DefaultTableModel model = (DefaultTableModel) jT_elenco.getModel();
        model.setNumRows(0);
        jT_elenco.setModel(model);
        Object[] obj_2 = {jCB_half, jCBox_cluster_face1, jDynaRia, jB_Java, jB_ReduceTCs, jCBox_cluster, jCBox_cluster_face, jB_SelezGS, jB_Load, jB_Filter, jB_View, jRB_Import};
        this.setEnableObject(obj_2 , false);
        this.fillTabEvents(new String[0][0]);
        jPB_progressione.setValue(0);
}//GEN-LAST:event_jB_cancelActionPerformed

    private void jB_XMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_XMLActionPerformed
        // TODO add your handling code here:
        SelectSource sd = new SelectSource(1);
        if(sd.getFlag() == 0){
            //non fare nulla
        }
        else{
            Object[] testCase = null;
            //Imposto testCase a seconda della scelta dell'utente.
            if(this.jCB_half.isSelected()){
                testCase = this.tcases_r;
            }
            else{
                testCase = this.tcases;
            }
            ParseToXML parse = new ParseToXML(testCase,this.getIdRowsSelected(jT_elenco, 1).size(), sd.getSource().getPath());
//            System.out.println(sd.getSource().getPath());
        }
    }//GEN-LAST:event_jB_XMLActionPerformed

    private void jB_SelezGSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SelezGSActionPerformed
        // TODO add your handling code here:
        SelectSource sd = new SelectSource(0);
        if(sd.getFlag() == 0){
            //non fare nulla
        }
        else{
            File file_selez = sd.getSource();
            jL_SelezGS.setText(file_selez.getName());
            imp = new ImportGoldenS(file_selez);
            jB_ReduceTCs.setEnabled(true);
            jCB_Kind.setEnabled(true);
        }
        
    }//GEN-LAST:event_jB_SelezGSActionPerformed

    private void jT_elencoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_elencoMouseClicked
        // TODO add your handling code here:
        if(jT_elenco.isEnabled()){
            Object[] obj = {jB_Load, jRB_Import, jCBox_cluster, jCBox_cluster_face};
            riga_selez = jT_elenco.getSelectedRow();
            if(riga_selez == 0 && jT_elenco.getValueAt(riga_selez, 0).toString().equals("true")){
                for(int i = 0; i < jT_elenco.getRowCount(); i++){
                    if(i != riga_selez){
                        jT_elenco.setValueAt(true, i, 0);
                        fillTabEvents(getInfoTracesSelected());
                    }
                }
                setEnableObject(obj, true);
            }
            else if(riga_selez == 0 && jT_elenco.getValueAt(riga_selez, 0).toString().equals("false")){
                for(int i = 0; i < jT_elenco.getRowCount(); i++){
                    if(i != riga_selez){
                        jT_elenco.setValueAt(false, i, 0);
                        fillTabEvents(getInfoTracesSelected());
                    }
                }
                setEnableObject(obj, false);
            }
            else if(getInfoTracesSelected().length > 0){
                setEnableObject(obj, true);
                fillTabEvents(getInfoTracesSelected());
            }
            else{
                setEnableObject(obj, false);
                fillTabEvents(getInfoTracesSelected());
            }
        }
    }//GEN-LAST:event_jT_elencoMouseClicked

    private void jB_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FilterActionPerformed
        // TODO add your handling code here:
        Vector filtri = getFilter();
        String filtro = new String();
        String event = new String();
        TestCase trace = null;
        String[][] tracesSelez = this.getInfoTracesSelected();
        String traccia_da_trattare = new String();
        if(filtri.size()!=0){
            for(int i = 0; i < tracesSelez.length; i++){
                for(int j = 0; j < filtri.size(); j++){
                    filtro = (String)filtri.elementAt(j);
                    event = filtro.substring(filtro.indexOf("$")+1, filtro.length());
                    filtro = filtro.substring(0,filtro.indexOf("$"));
                    traccia_da_trattare = tracesSelez[i][1];
                    trace = (TestCase)tcases[i];
                    if(traccia_da_trattare.equals(filtro)){
                        trace.cleanTrace(event);
                    }
                }
                tcases[i] = trace;
            }
        }
        if(tracesSelez.length >= 1 && jRB_Import.isSelected()){
            jCB_Kind.setEnabled(true);
            jB_ReduceTCs.setEnabled(true);
            jCB_mod.setEnabled(true);
        }
        else if(tracesSelez.length >= 1 && !jRB_Import.isSelected()){
            jB_SelezGS.setEnabled(true);
            jCB_mod.setEnabled(false);
        }
    }//GEN-LAST:event_jB_FilterActionPerformed

    private void jB_LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_LoadActionPerformed
        // TODO add your handling code here:
        String[][] traceSel = this.getInfoTracesSelected();
        DBmanagement db = new DBmanagement();
        String tipoClusterTran = (String)jCBox_cluster.getSelectedItem();
        String tipoClusterFace = (String)jCBox_cluster_face.getSelectedItem();
        String query = new String();
        ResultSet rs = null;
        TestCase trace = null;
        try{
            tcases = new Object[traceSel.length];
            conn = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
            
            //Controllo Progress Bar.
            jPB_progressione.setMaximum(traceSel.length*10);
            IncrementBar ib = new IncrementBar(traceSel.length*10, this);
            ib.start();
            //Fine controllo Progress Bar

            String temp = new String();
            for(int i = 0; i < traceSel.length; i++){
                query = new String("SELECT tra.id_start, tra.id_arrival,tra.id_tab_transition,tra."+tipoClusterTran+", ev.type, obj.xpath, face.ilabel, tra.tlabel, face."+tipoClusterFace+" FROM tab_trace t, tab_interface face, tab_transition tra, tab_event ev, tab_dom_object obj, tab_input i where t.id_tab_trace=face.id_tab_trace and face.id_tab_interface=tra.id_arrival and tra.id_tab_transition=ev.id_tab_transition and ev.id_tab_dom_object=obj.id_tab_dom_object and  t.id_tab_trace='"+traceSel[i][0]+"' group by tra.id_arrival");
                rs = db.select(query);
                trace = new TestCase(rs, 9);
                trace.setIdTrace(traceSel[i][0]);
                trace.setNameTrace(traceSel[i][1]);
                trace.setUserNameTrace(traceSel[i][2]);
                trace.setDateTrace(traceSel[i][3]);
                trace.setDateTrace(trace.getDateTrace().replaceAll(":", "_"));
                trace.convertPathObj();
                tcases[i] = trace;
            }
            db.close_db_connection(conn);
            //Abilita pulsanti nella sezione di elaborazione.
            jB_Filter.setEnabled(true);
            jB_Java.setEnabled(true);
            Object[] obj_4 = {jT_elenco, jCBox_cluster, jCBox_cluster_face, jB_Load, jRB_Import, jCB_mod};
            this.setEnableObject(obj_4, false);
        }
        catch(Exception ex){
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jB_LoadActionPerformed

    private void jB_ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ViewActionPerformed
        // TODO add your handling code here:
        Report rp;
        rp = new Report(tcases, tcases_r, matrix_full, matrix_reduc, this.jCBox_cluster_face.getSelectedItem().toString(), this.jCBox_cluster.getSelectedItem().toString(), this.jCB_Kind.getSelectedItem().toString(), this.jCB_mod.getSelectedItem().toString(), this.jRB_Import.isSelected());
        rp.setVisible(true);
    }//GEN-LAST:event_jB_ViewActionPerformed

    private void jB_SeleniumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SeleniumActionPerformed
        // TODO add your handling code here:
        LogTest log;
        TestSuite newt = new TestSuite();
        Object[] testCase = null;
        Commands command = null;
        String[][] cmd = null;
        Vector rowSel = this.getIdRowsSelected(jT_elenco, 1);
        //Imposto testCase a seconda della scelta dell'utente.
        if(this.jCB_half.isSelected()){
            testCase = this.tcases_r;
            /*System.out.println(this.jCB_half.isSelected()+" "+testCase.length);
            for(int i = 0; i < testCase.length; i++){
                System.out.println(((TestCase)testCase[i]).getNameTrace());
            }*/
        }
        else{
            testCase = this.tcases;
            /*System.out.println(this.jCB_half.isSelected()+" "+testCase.length);
            for(int i = 0; i < testCase.length; i++){
                System.out.println(((TestCase)testCase[i]).getNameTrace());
            }*/
        }
        
        for(int i = 0; i < testCase.length; i++){
            //Creo file di log
            log = new LogTest(((TestCase)testCase[i]).getNameTrace(),((TestCase)testCase[i]).getDateTrace(),((TestCase)testCase[i]).getIdTrace());
            newt.setLog(log);

            //Prelevo i comandi cmd da eseguire per la traccia specifica testCase[i].
            command = new Commands(testCase[i]);
            cmd = command.getCommands();

            System.out.println("Comandi traccia: "+i);//Da eliminare
            log.appendInfo(" -- Comandi che verranno eseguti -- \n");
            for(int j = 0; j < cmd.length; j++){
                log.appendInfo(cmd[j][0]+" "+cmd[j][1]+" "+cmd[j][2]);
                System.out.println(cmd[j][0]+" @ "+cmd[j][1]+" @ "+cmd[j][2]);//Da eliminare
            }
            log.appendInfo(" -- Fine comandi che verranno eseguti -- \n");
            System.out.println("Fine comandi traccia: "+i);//Da eliminare


            Thread th = new Thread(newt);
            th.start();
            //setUp
            newt.setUp();
            //Eseguo il test
            double temp1 = System.currentTimeMillis();
            if(newt.test(cmd, (String)this.jCBox_cluster_face1.getSelectedItem())){
                //tutto ok, andiamo avanti con la prossima traccia
                //tearDown
                double temp2 = System.currentTimeMillis();
                double res = temp2 - temp1;
                setColorTrace(((TestCase)testCase[i]).getIdTrace(), "G", res);
                newt.tearDown();
                Thread.interrupted();
            }
            else{
                double temp2 = System.currentTimeMillis();
                double res = temp2 - temp1;
                setColorTrace(((TestCase)testCase[i]).getIdTrace(), "R", res);
                //tearDown
                newt.tearDown();
                Thread.interrupted();
                continue;
            }
        }
    }//GEN-LAST:event_jB_SeleniumActionPerformed

    private void jB_JavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_JavaActionPerformed
        // TODO add your handling code here:
        IoFileWriting classJava;
        int numTraces = this.getIdRowsSelected(jT_elenco, 1).size();
        String[][] infoTraces;
        String nameFile;
        Commands comm;
        String[][] cmds;
        if(numTraces >= 1){
            infoTraces = this.getInfoTracesSelected();
            for(int i = 0; i < infoTraces.length; i++){
                comm = new Commands(this.tcases[i]);
                cmds = comm.getCommands();
                nameFile = new String(infoTraces[i][1].replaceAll(" ", "_"));
                classJava = new IoFileWriting("java//"+nameFile+".java");
                classJava.write("package test;");
                classJava.write("/*");
                classJava.write("* To change this template, choose Tools | Templates");
                classJava.write("* and open the template in the editor.");
                classJava.write("*/");
                classJava.write("import com.thoughtworks.selenium.Selenium;");
                classJava.write("import org.seleniuminspector.SeleniumTestCase;");
                classJava.write("import service.Utility;");
                classJava.write("import testsuitemanager.Commands;");
                classJava.write("/**");
                classJava.write("*");
                classJava.write("* @author angelo");
                classJava.write("*/");
                classJava.write("public class "+nameFile+" extends SeleniumTestCase implements Runnable{");
                classJava.write("    private Selenium selenium;");
                classJava.write("    private Utility utility;");
                classJava.write(" ");
                classJava.write("    public boolean test() {");
                classJava.write("        selenium = utility.setUp();");
                classJava.write("        String[][] cmd = new String["+cmds.length+"][3];");
                classJava.write("        boolean assertInterface = false;\n");
                classJava.write("        String[][] fields = null;");
                classJava.write("        Commands comm = new Commands();");
                classJava.write("        String cluster = new String("+"\""+(String)this.jCBox_cluster_face.getSelectedItem()+"\""+");");
                for(int r = 0; r < cmds.length; r++){
                classJava.write("        cmd["+r+"][0] = "+"\""+cmds[r][0]+"\";");
                classJava.write("        cmd["+r+"][1] = "+"\""+cmds[r][1]+"\";");
                classJava.write("        cmd["+r+"][2] = "+"\""+cmds[r][2]+"\";");
                }
                classJava.write("        for(int i = 0; i < cmd.length; i++){");
                classJava.write("            assertInterface = utility.assertPage(utility.getObj(cluster, Integer.parseInt(cmd[i][2])), cluster, selenium);");
                classJava.write("            if(assertInterface){");
                classJava.write("                fields = comm.getValueFields(cmd[i][2]);");
                classJava.write("                if(fields.length != 0){");
                classJava.write("                    for(int k = 0; k < fields.length; k++){");
                classJava.write("                        selenium.type(\"//html[1]\"+fields[k][1].substring(8), fields[k][0]);");
                classJava.write("                    }");
                classJava.write("                }");
                classJava.write("                if(cmd[i][0].equals(\"click\")){");
                classJava.write("                    selenium.click(cmd[i][1]);");
                classJava.write("                }");
                classJava.write("            }");
                classJava.write("            else{");
                classJava.write("                break;");
                classJava.write("            }");
                classJava.write("        }");
                classJava.write("        utility.tearDown(selenium);");
                classJava.write("        return assertInterface;");
                classJava.write("     }");
                classJava.write(" ");
                classJava.write("   public void run() {");
                classJava.write("   }");
                classJava.write("}");
            }
        }
    }//GEN-LAST:event_jB_JavaActionPerformed

    private void jT_FilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_FilterMouseClicked
        // TODO add your handling code here:
        String typeEv = new String();
        boolean selez = false;
        Boolean bool;
        for(int i = 0; i < jT_Filter.getRowCount(); i++){
            bool = new Boolean((jT_Filter.getValueAt(i, 0).toString()));
            selez = bool.booleanValue();
            typeEv = ((String)jT_Filter.getValueAt(i, 1));
            for(int j = 0; j < jT_Event.getRowCount(); j++){
                if(selez && typeEv.equals(this.jT_Event.getValueAt(j, 2))){
                    jT_Event.setValueAt(true, j, 0);
                }
                else if(!selez && typeEv.equals(this.jT_Event.getValueAt(j, 2))){
                    jT_Event.setValueAt(false, j, 0);
                }
            }
        }
    }//GEN-LAST:event_jT_FilterMouseClicked

    private void jDynaRiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDynaRiaActionPerformed
        // TODO add your handling code here:
        try{
            Element rootElement = new Element("DynaRIA");
            Document document = new Document(rootElement);
            String[][] infoTraceSel = this.getInfoTracesSelected();
            Element idTracce = new Element("IdTracce");
            rootElement.addContent(idTracce);
            Element id;
            for(int i = 0; i < infoTraceSel.length; i++){
                id = new Element("Traccia_"+i);
                id.setText(infoTraceSel[i][0]);
                idTracce.addContent(id);
            }
            
            //Creazione dell'oggetto XMLOutputter
            XMLOutputter outputter = new XMLOutputter();
            //Imposto il formato dell'outputter come "bel formato"
            outputter.setFormat(Format.getPrettyFormat());
            //Produco l'output sul file xml.foo
            FileOutputStream f = new FileOutputStream("dynaria//dynaria.xml");
            //outputter.output(document, f);
            outputter.output(document, f);
        }
        catch(IOException e) {
              System.err.println("Errore durante la creazione del file per DynaRia");
              e.printStackTrace();
            }
    }//GEN-LAST:event_jDynaRiaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Credits cr = new Credits();
        cr.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCB_AppNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_AppNameActionPerformed
        // TODO add your handling code here:
        if(!this.jCB_AppName.getSelectedItem().equals(this.jCB_AppName.getItemAt(0))){
            this.fillTabTrace(getTraces((String)jCB_AppName.getSelectedItem()));
        }
        else{
            this.fillTabTrace(getTraces(""));
        }
    }//GEN-LAST:event_jCB_AppNameActionPerformed

    private void jCB_TSRidotteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_TSRidotteActionPerformed
        // TODO add your handling code here:
        try{
            if(!this.jCB_TSRidotte.getSelectedItem().equals(this.jCB_TSRidotte.getItemAt(0))){
                this.jB_DeleteTS.setEnabled(true);
                this.fillTabTrace(getTSR((String)jCB_TSRidotte.getSelectedItem()));
            }
            else{
                this.jB_DeleteTS.setEnabled(false);
                this.fillTabTrace(getTraces(""));
            }
        }
        catch(NullPointerException ex){
            this.jB_DeleteTS.setEnabled(false);
            this.fillTabTrace(getTraces(""));
        }
    }//GEN-LAST:event_jCB_TSRidotteActionPerformed

    private void jTF_TSRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTF_TSRMouseClicked
        // TODO add your handling code here:
        jTF_TSR.setText("");
    }//GEN-LAST:event_jTF_TSRMouseClicked

    private void jB_DeleteTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DeleteTSActionPerformed
        // TODO add your handling code here:
        String tsr = new String((String)this.jCB_TSRidotte.getSelectedItem());
        DBmanagement db = new DBmanagement();
        Connection connec = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        String query = "DELETE FROM creriautente.tab_ts_reduced WHERE name='"+tsr+"'";
        db.update(query);
        db.close_db_connection(connec);
        this.fillNameTSReduced();
    }//GEN-LAST:event_jB_DeleteTSActionPerformed

    private void loadComboBox(){//non chiamata
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        String[][] res = null;
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        query = new String("SELECT t.Name FROM tab_type_cluster_transition t");
        rs = db.select(query);
        data = new DataSet(rs,1);
        res = data.getMatrixOfRSet();
        for(int i = 0; i < res.length; i++){
            jCBox_cluster.addItem(res[i][0]);
        }
        query = new String("SELECT t.Name FROM tab_type_cluster_state t");
        rs = db.select(query);
        data = new DataSet(rs,1);
        res = data.getMatrixOfRSet();
        for(int i = 0; i < res.length; i++){
            jCBox_cluster_face.addItem(res[i][0]);
        }
        db.close_db_connection(connection);

    }

    private void fillTabTrace(String[][] tracesLoaded){
            try {
                DefaultTableModel model = (DefaultTableModel) jT_elenco.getModel();
                model.setNumRows(tracesLoaded.length+1);
                Vector dimTraces = this.getDimTraces(tracesLoaded);
                jT_elenco.setModel(model);
                jT_elenco.getColumn("").setMinWidth(20);
                jT_elenco.getColumn("").setMaxWidth(20);
                jT_elenco.getColumn("").setResizable(false);
                jT_elenco.getColumn("-").setMinWidth(35);
                jT_elenco.getColumn("-").setMaxWidth(35);
                jT_elenco.getColumn("-").setResizable(false);
                jT_elenco.getColumn("Id Trace").setMinWidth(50);
                jT_elenco.getColumn("Id Trace").setMaxWidth(50);
                jT_elenco.getColumn("Id Trace").setResizable(false);
                jT_elenco.getColumn("Size").setMinWidth(55);
                jT_elenco.getColumn("Size").setMaxWidth(55);
                jT_elenco.getColumn("Size").setResizable(false);
                jT_elenco.getColumn("Date").setMinWidth(120);
                jT_elenco.getColumn("Date").setMaxWidth(120);
                jT_elenco.getColumn("Date").setResizable(false);
                jT_elenco.getColumn("Username").setResizable(false);
                jT_elenco.getColumn("Name trace").setResizable(true);
                jT_elenco.getColumnModel().getColumn(5).setCellRenderer(new JProgress(dimTraces));
                jT_elenco.getColumnModel().getColumn(6).setCellRenderer(new JProgress());

                for(int k = 0; k < tracesLoaded.length; k++){
                    jT_elenco.setValueAt(false, k+1, 0);
                    jT_elenco.setValueAt(tracesLoaded[k][0], k+1, 1);
                    jT_elenco.setValueAt(tracesLoaded[k][1], k+1, 2);
                    jT_elenco.setValueAt(tracesLoaded[k][2], k+1, 3);
                    jT_elenco.setValueAt(tracesLoaded[k][3]+"_"+tracesLoaded[k][4], k+1, 4);
                    jT_elenco.setValueAt(Integer.parseInt(String.valueOf(dimTraces.elementAt(k))), k+1, 5);
                }

                jT_monitor.setBackground(Color.GREEN);
                user = jTx_user.getText();
                passwo = jPass_password.getPassword();
                porto = jTx_port.getText();
                nomeDB = (String)jTx_nome_db.getSelectedItem();
                posiz = jTx_indirizzo_db.getText();
            }
            catch (Exception ex) {
                jT_monitor.setBackground(Color.RED);
                ex.printStackTrace();
            }
            Object[] obj = {jTx_user, jPass_password, jTx_nome_db, jTx_port, jTx_indirizzo_db, jB_connect};
            this.setEnableObject(obj , false);
            Object[] obj_2 = {jDynaRia};
            this.setEnableObject(obj_2, true);
    }

    private String[][] getTSR(String ts){
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        query = new String("SELECT ts.id_trace FROM tab_ts_reduced ts where ts.name='"+ts+"'");
        rs = db.select(query);
        data = new DataSet(rs,1);
        String[][] idtr = data.getMatrixOfRSet();
        DataSet[] traces = new DataSet[idtr.length];
        for(int i = 0; i < idtr.length; i++){
            int id = Integer.parseInt(idtr[i][0]);
            query = new String("SELECT tr.id_tab_trace,tr.tracename,t.username,tr.tracedata,tr.tracetime,tr.appname FROM tab_user t, tab_trace tr where t.id_tab_user = tr.id_tab_user and tr.id_tab_trace='"+id+"'");
            rs = db.select(query);
            traces[i] = new DataSet(rs,6);
        }
        db.close_db_connection(connection);
        String[][] res = new String[idtr.length][6];
        String[][] temp = null;
        for(int i = 0; i < res.length; i++){
            temp = traces[i].getMatrixOfRSet();
            for(int j = 0; j < res[0].length; j++){
                res[i][j] = temp[0][j];
            }
        }
        return res;
    }

    private String[][] getTraces(String appname){
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        if(appname.equals("")){
            query = new String("SELECT tr.id_tab_trace,tr.tracename,t.username,tr.tracedata,tr.tracetime,tr.appname FROM tab_user t, tab_trace tr where t.id_tab_user = tr.id_tab_user");
        }
        else{
            query = new String("SELECT tr.id_tab_trace,tr.tracename,t.username,tr.tracedata,tr.tracetime,tr.appname FROM tab_user t, tab_trace tr where t.id_tab_user = tr.id_tab_user and tr.appname='"+appname+"'");
        }
        rs = db.select(query);
        data = new DataSet(rs,6);
        db.close_db_connection(connection);
        return data.getMatrixOfRSet();
    }

    private Vector getDimTraces(String[][] traces){
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        String[][] temp = null;
        Vector res = new Vector();
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        for(int i = 0; i < traces.length; i++){
            query = new String("SELECT COUNT(*) FROM tab_interface tf, tab_trace tr WHERE tf.id_tab_trace = tr.id_tab_trace and tf.id_tab_trace = '"+traces[i][0]+"'");
            rs = db.select(query);
            data = new DataSet(rs,1);
            temp = data.getMatrixOfRSet();
            res.addElement(temp[0][0]);
        }
        db.close_db_connection(connection);
        return res;
    }

    private Vector getFilter(){
        Vector res = new Vector();
        String fil = new String();
        Object obj = new Object();
        for(int i = 0; i < jT_Event.getRowCount(); i++){
            obj = jT_Event.getValueAt(i, 0);
            fil = obj.toString();
            if(fil.equals("true")){
                fil = jT_Event.getValueAt(i, 1)+"$"+jT_Event.getValueAt(i, 2);
                res.addElement(fil);
            }
        }
        return res;
    }

    private void setEnableObject(Object[] obj , boolean state){
        JComponent comp;
        for(int i = 0; i < obj.length; i++){
            comp = (JComponent) obj[i];
            comp.setEnabled(state);
        }
    }

    private void setColorTrace(String idTrace, String color, double tempo){
        String temp = new String();
        DecimalFormat df = new DecimalFormat("#");
        double div = 1000;
        double res = tempo/div;
        for(int i = 1; i < this.jT_elenco.getRowCount(); i++){
            temp = String.valueOf(jT_elenco.getValueAt(i, 1));
            if(temp.equals(idTrace)){
                jT_elenco.setValueAt(color+""+df.format(res)+"s", i, 6);
            }
        }
    }

    private Vector getIdRowsSelected(JTable table, int start){
        Vector rowsSel = new Vector();
        Object obj = new Object();
        String str = new String();
        for(int i = start; i < table.getRowCount(); i++){
            obj = table.getValueAt(i, 0);
            str = obj.toString();
            if(str.equals("true")){rowsSel.addElement(i);}
        }
        return rowsSel;
    }

    private String[][] getInfoTracesSelected(){
        Vector idRows = this.getIdRowsSelected(jT_elenco, 1);
        String[][] infoTraceSel = new String[idRows.size()][4];
        Object obj = new Object();
        String str = new String();
        for(int i = 0; i < idRows.size(); i++){
            obj = jT_elenco.getValueAt(Integer.parseInt(String.valueOf(idRows.elementAt(i))), 0);
            str = obj.toString();
            if(str.equals("true")){
                infoTraceSel[i][0] = (String)jT_elenco.getValueAt(Integer.parseInt(String.valueOf(idRows.elementAt(i))), 1);
                infoTraceSel[i][1] = (String)jT_elenco.getValueAt(Integer.parseInt(String.valueOf(idRows.elementAt(i))), 2);
                infoTraceSel[i][2] = (String)jT_elenco.getValueAt(Integer.parseInt(String.valueOf(idRows.elementAt(i))), 3);
                infoTraceSel[i][3] = (String)jT_elenco.getValueAt(Integer.parseInt(String.valueOf(idRows.elementAt(i))), 4);
            }
        }
        return infoTraceSel;
    }

    private void fillAppName(Vector apname){
        this.jCB_AppName.addItem("App Name");
        for(int i = 0; i < apname.size(); i++){
            this.jCB_AppName.addItem(apname.elementAt(i));
        }
    }

    private void fillNameTSReduced(){
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        query = new String("SELECT tsr.name FROM tab_ts_reduced tsr");
        rs = db.select(query);
        data = new DataSet(rs,1);
        db.close_db_connection(connection);
        jCB_TSRidotte.removeAllItems();
        this.jCB_TSRidotte.addItem("TS Reduced");
        Vector ts = new Vector();
        for(int i = 0; i < data.getMatrixOfRSet().length; i++){
            if(!ts.contains(data.getMatrixOfRSet()[i][0])){
                ts.addElement(data.getMatrixOfRSet()[i][0]);
            }
        }
        for(int i = 0; i < ts.size(); i++){
            this.jCB_TSRidotte.addItem(ts.elementAt(i));
        }
    }

    private Vector getAppName(String[][] tracesLoaded){
        Vector res = new Vector();
        for(int i = 0; i < tracesLoaded.length; i++){
            if(!res.contains(tracesLoaded[i][5])){
                res.addElement(tracesLoaded[i][5]);
            }
        }
        return res;
    }

    private void fillTabEvents(String[][] infoTr){
        DefaultTableModel model = (DefaultTableModel) jT_Event.getModel();
        Connection con = null;
        String query = null;
        Vector row_1 = new Vector();
        Vector row_2 = new Vector();
        String temp = new String();
        DBmanagement db1 = new DBmanagement();
        try{
            con = (Connection) db1.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
            for(int i = 0; i < infoTr.length; i++){
                query = new String("SELECT t.tracename, ev.type FROM tab_trace t, tab_interface face, tab_transition tra, tab_event ev where t.id_tab_trace=face.id_tab_trace and face.id_tab_interface=tra.id_arrival and tra.id_tab_transition=ev.id_tab_transition and t.id_tab_trace = '"+infoTr[i][0]+"' ");
                ResultSet rs = db1.select(query);
                while(rs.next()){
                    temp = rs.getString(1)+"$"+rs.getString(2);
                    if(!row_1.contains(temp)){
                        row_1.addElement(temp);
                    }
                    temp = rs.getString(2);
                    if(!row_2.contains(temp)){
                        row_2.addElement(temp);
                    }
                }
            }
            db1.close_db_connection(con);
            model.setRowCount(row_1.size());
            jT_Event.getColumn("").setMinWidth(20);
            jT_Event.getColumn("").setMaxWidth(20);
            jT_Event.getColumn("").setResizable(false);
            jT_Event.getColumn("Event").setResizable(false);
            jT_Event.getColumn("Trace").setResizable(false);
            for(int j = 0; j < row_1.size(); j++){
                jT_Event.setValueAt(false, j, 0);
                jT_Event.setValueAt(row_1.elementAt(j).toString().substring(0, row_1.elementAt(j).toString().indexOf("$")), j, 1);
                jT_Event.setValueAt(row_1.elementAt(j).toString().substring(row_1.elementAt(j).toString().indexOf("$")+1, row_1.elementAt(j).toString().length()), j, 2);
            }
            model = (DefaultTableModel) this.jT_Filter.getModel();
            model.setRowCount(row_2.size());
            jT_Filter.getColumn("").setMinWidth(20);
            jT_Filter.getColumn("").setMaxWidth(20);
            jT_Filter.getColumn("").setResizable(false);
//            jT_Filter.getColumn("Filter type").setResizable(false);
            for(int j = 0; j < row_2.size(); j++){
                jT_Filter.setValueAt(false, j, 0);
                jT_Filter.setValueAt(row_2.elementAt(j), j, 1);
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }

    }

    private void writeTSR(Object[] tcases_r) {
        DBmanagement db = new DBmanagement();
        Connection connection = null;
        String query = new String();
        ResultSet rs = null;
        DataSet data = null;
        connection = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), (String)jTx_nome_db.getSelectedItem(), jTx_port.getText(), jTx_indirizzo_db.getText());
        TestCase tcase;
        for(int i = 0; i < tcases_r.length; i++){
            tcase = (TestCase)tcases_r[i];
            query = new String("INSERT INTO tab_ts_reduced (name, id_trace) VALUES('"+this.jTF_TSR.getText()+"', '"+tcase.getIdTrace()+"')");
            db.update(query);
        }
        db.close_db_connection(connection);
    }

    private void loadNameDBs(){
        try{
            DBmanagement db = new DBmanagement();
            Connection con = (Connection) db.db_connection(jTx_user.getText(), jPass_password.getPassword(), "", jTx_port.getText(), jTx_indirizzo_db.getText());
            ResultSet rs = (ResultSet) con.getMetaData().getCatalogs();
            jTx_nome_db.removeAllItems();
            while (rs.next()){
                jTx_nome_db.addItem(rs.getString(1));
            }
        }
        catch (Exception ex){}
    }
    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jB_DeleteTS;
    private javax.swing.JButton jB_Filter;
    private javax.swing.JButton jB_Java;
    private javax.swing.JButton jB_Load;
    private javax.swing.JButton jB_ReduceTCs;
    private javax.swing.JButton jB_Selenium;
    private javax.swing.JButton jB_SelezGS;
    private javax.swing.JButton jB_View;
    private javax.swing.JButton jB_XML;
    private javax.swing.JButton jB_cancel;
    private javax.swing.JButton jB_connect;
    private javax.swing.JButton jB_quit;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCB_AppName;
    private javax.swing.JComboBox jCB_Kind;
    private javax.swing.JComboBox jCB_TSRidotte;
    private javax.swing.JCheckBox jCB_half;
    private javax.swing.JComboBox jCB_mod;
    private javax.swing.JComboBox jCBox_cluster;
    private javax.swing.JComboBox jCBox_cluster_face;
    private javax.swing.JComboBox jCBox_cluster_face1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JButton jDynaRia;
    private javax.swing.JLabel jL_SelezGS;
    private javax.swing.JLabel jL_Tecniche;
    private javax.swing.JLabel jL_cluster;
    private javax.swing.JLabel jL_cluster_face;
    private javax.swing.JLabel jL_db;
    private javax.swing.JLabel jL_indirizzo_db;
    private javax.swing.JLabel jL_pass;
    private javax.swing.JLabel jL_port;
    private javax.swing.JLabel jL_trace;
    private javax.swing.JLabel jL_user;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jP_pannello;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBar;
    private javax.swing.JPasswordField jPass_password;
    private javax.swing.JRadioButton jRB_Import;
    private javax.swing.JSeparator jS_separatore;
    private javax.swing.JSeparator jS_separatore1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTF_TSR;
    private javax.swing.JTable jT_Event;
    private javax.swing.JTable jT_Filter;
    private javax.swing.JTable jT_elenco;
    private javax.swing.JTextField jT_monitor;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTx_indirizzo_db;
    private javax.swing.JComboBox jTx_nome_db;
    private javax.swing.JTextField jTx_port;
    private javax.swing.JTextField jTx_titolo;
    private javax.swing.JTextField jTx_user;
    private javax.swing.JFrame start;
    // End of variables declaration//GEN-END:variables


}
